BACKSTORY
When the XML API was first released, it was ground breaking. No video game had ever provided such extensive access to its data, and you did some amazing things with it. EVEMon and EFT are legendary tools that have been supporting EVE for years, and they are joined by a forest of novel and powerful solutions created by our players on the back of the XML API. But the XML API was limited, only capable of exposing certain data, read only and at times slow to react to events in game. Critically, its documentation was a nightmare, forever lagging behind real development and with essentially no discovery.
So we introduced CREST, and that too was ground breaking. It brought a cleaner data format, a RESTful interface and faster access to live simulation data. Eventually, it paved the way for writeable endpoints, which again were all but unheard of in the gaming industry. Some of the work that's been built on top of CREST is just staggering, and we're always hearing about new and novel ideas that make the very most of what can be done with its powerful capabilities.
CREST also pushed an ideal about being self-documenting. A combination of automatically generated options calls and a paradigm of linking from the root of the API was to provide a fully self documenting API. This was a partial success, and crawling the CREST API is certainly a good way for users to learn about it. However, there are hairline cracks showing. Large sections of the tree cannot be crawled unless certain in game conditions are met, such as having the correct corp roles or owning a citadel, and not every resource is correctly linked. It can be hard to tell why you can't access a thing. CREST developers still routinely refer to third party documentation for full descriptions of the API. It was a bold attempt, but it fell a little short.
CCP has always been at the forefront of API development in the games industry, and we're sure not going to stop here and rest on our laurels. We've taken the good that CREST and the XML API created, we've critically examined the bad, and it's time to modernise! Read on...